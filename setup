#!/usr/bin/env bash
# setup

set -euo pipefail

# --- Project Configuration ---
PROJECT_NAME="digital-heirlooms"

# --- Script and User Configuration Paths ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
USER_CONFIG_DEFAULT="$HOME/.config/$PROJECT_NAME"

EFFECTIVE_USER_CFG_ROOT="" 

# Variables for identifying user and host
USER_NAME="$(whoami)"
HOST_NAME="$(hostname -s)"
IDENT="${USER_NAME}@${HOST_NAME}"
PLACEHOLDER="__user__@__hostname__"

# Source/Template paths
USER_ENV_SRC_TEMPLATE="$SCRIPT_DIR/config/env/${PLACEHOLDER}_.env.template"
USER_EXCLUDES_SRC_TEMPLATE="$SCRIPT_DIR/config/excludes/${PLACEHOLDER}"
USER_MACHINE_SRC_TEMPLATE="$SCRIPT_DIR/config/machines-available/${PLACEHOLDER}"
REPO_DEFAULT_EXCLUDE_SRC="$SCRIPT_DIR/config/excludes/default.exclude"
REPO_CONFIG_DIR_FOR_SYMLINK="$SCRIPT_DIR/config" # More descriptive for its use in symlink
REPO_HOOKS_DIR="$SCRIPT_DIR/config/hooks"

# Destination paths
USER_ENV_DEST=""
USER_EXCLUDES_DEST=""
USER_MACHINE_DEST=""
USER_DEFAULT_EXCLUDE_DEST=""
# REPO_ENV_LINK_TARGET is no longer needed as symlink logic is more complex
USER_HOOKS_AVAIL_DIR=""
USER_HOOKS_ENABLED_DIR=""
USER_MAIN_ENV_SYMLINK="" # For the user's primary backup.env symlink

# Test specific output directory variables
TEST_BACKUP_TARGET_DIR=""
TEST_BACKUP_ARCHIVE_DIR=""

# --- Flags ---
FORCE_FLAG=false
RUN_TEST_FLAG=false
USER_CONFIG_DIR_ARG=""

print_usage() {
  echo "Usage: $0 [OPTIONS]"
  echo "Sets up the initial user configuration for $PROJECT_NAME."
  echo ""
  echo "Options:"
  echo "  --force                Overwrite existing template-based files in the user config."
  echo "  --test                 Run setup in an isolated, temporary test configuration environment."
  echo "  --user-config-dir <path>"
  echo "                         Specify a custom root directory for user configurations."
  echo "                         (Default: $USER_CONFIG_DEFAULT)"
  echo "  --help, -h             Show this help message."
}

# --- Argument Parsing ---
while [[ $# -gt 0 ]]; do
  arg="$1"
  case "$arg" in
    --force)
      FORCE_FLAG=true
      shift
      ;;
    --test)
      RUN_TEST_FLAG=true
      shift
      ;;
    --user-config-dir=*)
      USER_CONFIG_DIR_ARG="${arg#*=}"
      shift
      ;;
    --user-config-dir)
      if [[ -n "${2:-}" && "${2}" != --* ]]; then
        USER_CONFIG_DIR_ARG="$2"
        shift 2
      else
        echo "ERROR: --user-config-dir requires a value." >&2
        print_usage
        exit 1
      fi
      ;;
    --help|-h)
      print_usage
      exit 0
      ;;
    *)
      echo "ERROR: Unknown option: $arg" >&2
      print_usage
      exit 1
      ;;
  esac
done

# --- Determine Effective User Configuration Root & Test Env Setup ---
if [[ "$RUN_TEST_FLAG" == true ]]; then
  echo "INFO: Test mode enabled. Using isolated test configuration environment."
  EFFECTIVE_USER_CFG_ROOT="$SCRIPT_DIR/test/test_run_output_config_dir"
  TEST_BACKUP_TARGET_DIR="$SCRIPT_DIR/test/test_run_output_backup_target"
  TEST_BACKUP_ARCHIVE_DIR="$TEST_BACKUP_TARGET_DIR/archive"

  echo "INFO: Test mode: Cleaning up previous test output config directory: $EFFECTIVE_USER_CFG_ROOT"
  rm -rf "$EFFECTIVE_USER_CFG_ROOT"
  echo "INFO: Test mode: Cleaning up previous test backup target directory: $TEST_BACKUP_TARGET_DIR"
  rm -rf "$TEST_BACKUP_TARGET_DIR"
  
  mkdir -p "$EFFECTIVE_USER_CFG_ROOT"
  mkdir -p "$TEST_BACKUP_TARGET_DIR"
  mkdir -p "$TEST_BACKUP_ARCHIVE_DIR"
else
  if [[ -n "$USER_CONFIG_DIR_ARG" ]]; then
    if ! cfg_realpath_tmp="$(realpath "$USER_CONFIG_DIR_ARG" 2>/dev/null)"; then
      echo "ERROR: Invalid path specified with --user-config-dir: $USER_CONFIG_DIR_ARG" >&2
      exit 1
    fi
    EFFECTIVE_USER_CFG_ROOT="$cfg_realpath_tmp"
  else
    EFFECTIVE_USER_CFG_ROOT="$USER_CONFIG_DEFAULT"
  fi
fi
echo "INFO: Effective user configuration root set to: $EFFECTIVE_USER_CFG_ROOT"


# --- Define User-Specific Destination Paths (using EFFECTIVE_USER_CFG_ROOT) ---
USER_ENV_DEST="$EFFECTIVE_USER_CFG_ROOT/env/${IDENT}_default.env"
USER_EXCLUDES_DEST="$EFFECTIVE_USER_CFG_ROOT/excludes/${IDENT}.exclude" 
USER_MACHINE_DEST="$EFFECTIVE_USER_CFG_ROOT/machines-available/${IDENT}"
USER_DEFAULT_EXCLUDE_DEST="$EFFECTIVE_USER_CFG_ROOT/excludes/default.exclude"
USER_HOOKS_AVAIL_DIR="$EFFECTIVE_USER_CFG_ROOT/hooks-available"
USER_HOOKS_ENABLED_DIR="$EFFECTIVE_USER_CFG_ROOT/hooks-enabled"
USER_MAIN_ENV_SYMLINK="$EFFECTIVE_USER_CFG_ROOT/backup.env" # User's primary symlink


# --- Main User Setup Logic (Non-Test Mode) ---
if [[ "$RUN_TEST_FLAG" == false ]]; then
  echo "Setting up $PROJECT_NAME user configuration for: $IDENT"

  mkdir -p "$EFFECTIVE_USER_CFG_ROOT/env" \
    "$EFFECTIVE_USER_CFG_ROOT/excludes" \
    "$EFFECTIVE_USER_CFG_ROOT/machines-available" \
    "$USER_HOOKS_AVAIL_DIR" \
    "$USER_HOOKS_ENABLED_DIR"

  # Create user environment file (_default.env)
  if [[ "$FORCE_FLAG" = true || ! -f "$USER_ENV_DEST" ]]; then
    if [[ -f "$USER_ENV_SRC_TEMPLATE" ]]; then
      temp_env_file=$(mktemp)
      sed "s/$PLACEHOLDER/$IDENT/g" "$USER_ENV_SRC_TEMPLATE" > "$temp_env_file"
      if grep -q "^CONFIG_DIR=" "$temp_env_file"; then
        sed -i "s|^CONFIG_DIR=.*|CONFIG_DIR=\"$EFFECTIVE_USER_CFG_ROOT\"|" "$temp_env_file"
      else
        echo "" >>"$temp_env_file"
        echo "# Path to the root of this user's $PROJECT_NAME configuration" >>"$temp_env_file"
        echo "CONFIG_DIR=\"$EFFECTIVE_USER_CFG_ROOT\"" >>"$temp_env_file"
      fi
      mv "$temp_env_file" "$USER_ENV_DEST"
      echo "Wrote user env: $USER_ENV_DEST"
    else
      echo "WARN: User env template not found: $USER_ENV_SRC_TEMPLATE. Cannot create $USER_ENV_DEST." >&2
    fi
  else
    echo "Skipped: $USER_ENV_DEST already exists (use --force to overwrite)"
  fi

  # Create user excludes file (.exclude suffix)
  if [[ "$FORCE_FLAG" = true || ! -f "$USER_EXCLUDES_DEST" ]]; then
    if [[ -f "$USER_EXCLUDES_SRC_TEMPLATE" ]]; then
      sed "s/$PLACEHOLDER/$IDENT/g" "$USER_EXCLUDES_SRC_TEMPLATE" >"$USER_EXCLUDES_DEST"
      echo "Wrote user excludes: $USER_EXCLUDES_DEST"
    else
      echo "# User specific excludes for $IDENT - please add patterns here" > "$USER_EXCLUDES_DEST"
      echo "Created empty user excludes: $USER_EXCLUDES_DEST (template $USER_EXCLUDES_SRC_TEMPLATE not found)"
    fi
  else
    echo "Skipped: $USER_EXCLUDES_DEST already exists (use --force to overwrite)"
  fi

  # Create user machine config file
  if [[ "$FORCE_FLAG" = true || ! -f "$USER_MACHINE_DEST" ]]; then
    if [[ -f "$USER_MACHINE_SRC_TEMPLATE" ]]; then
      sed -e "s/$PLACEHOLDER/$IDENT/g" \
        -e "s|^src=.*# TODO: Edit this.*|src=/home/$USER_NAME # TODO: Please edit this path to your actual data source|" \
        -e "s|exclude-from=.*|exclude-from=$USER_EXCLUDES_DEST|" \
        "$USER_MACHINE_SRC_TEMPLATE" >"$USER_MACHINE_DEST"
      echo "Wrote user machine config: $USER_MACHINE_DEST"
    else
      echo "[$IDENT]" >"$USER_MACHINE_DEST"
      echo "src=/home/$USER_NAME # TODO: Change this to the actual path you want to back up" >>"$USER_MACHINE_DEST"
      echo "exclude-from=$USER_EXCLUDES_DEST" >>"$USER_MACHINE_DEST"
      echo "Created placeholder user machine config: $USER_MACHINE_DEST (template $USER_MACHINE_SRC_TEMPLATE not found)"
    fi
    echo "Action required: Please review and edit $USER_MACHINE_DEST with actual paths to back up."
  else
    echo "Skipped: $USER_MACHINE_DEST already exists (use --force to overwrite)"
  fi

  # Copy default excludes file
  if [[ "$FORCE_FLAG" = true || ! -f "$USER_DEFAULT_EXCLUDE_DEST" ]]; then
    if [[ -f "$REPO_DEFAULT_EXCLUDE_SRC" ]]; then
      cp "$REPO_DEFAULT_EXCLUDE_SRC" "$USER_DEFAULT_EXCLUDE_DEST"
      echo "Copied default.exclude to: $USER_DEFAULT_EXCLUDE_DEST"
    else
      echo "WARN: Repository default exclude source file not found: $REPO_DEFAULT_EXCLUDE_SRC" >&2
    fi
  else
    echo "Skipped: $USER_DEFAULT_EXCLUDE_DEST already exists (use --force to overwrite)"
  fi

  # --- Copy Repository Hooks to User's hooks-available (Theme 5) ---
  if [[ -d "$REPO_HOOKS_DIR" ]]; then
    echo "INFO: Populating user's '$USER_HOOKS_AVAIL_DIR' with default hooks from repository..."
    mkdir -p "$USER_HOOKS_AVAIL_DIR" # Ensure it exists
    for repo_hook_file in "$REPO_HOOKS_DIR"/*; do
      if [[ -f "$repo_hook_file" ]]; then # Process only files
        hook_basename=$(basename "$repo_hook_file")
        user_hook_dest_path="$USER_HOOKS_AVAIL_DIR/$hook_basename"
        if [[ "$FORCE_FLAG" == true || ! -f "$user_hook_dest_path" ]]; then
          cp "$repo_hook_file" "$user_hook_dest_path"
          chmod u+x "$user_hook_dest_path" # Make hook executable for the user
          echo "Copied and made executable: $user_hook_dest_path"
        else
          echo "Skipped hook: $user_hook_dest_path already exists. Use --force to overwrite."
        fi
      fi
    done
  else
    echo "WARN: Repository default hooks directory not found: $REPO_HOOKS_DIR. No default hooks copied." >&2
  fi

  # --- Setup Main backup.env Symlink in User Config (Theme 5) ---
  if [[ -f "$USER_ENV_DEST" ]]; then # USER_ENV_DEST is the _default.env file
      if [[ ! -L "$USER_MAIN_ENV_SYMLINK" || "$FORCE_FLAG" == true || "$(readlink "$USER_MAIN_ENV_SYMLINK")" != "$USER_ENV_DEST" ]]; then
          echo "INFO: Linking user's main backup.env: $USER_MAIN_ENV_SYMLINK -> $USER_ENV_DEST"
          ln -sf "$USER_ENV_DEST" "$USER_MAIN_ENV_SYMLINK"
      else
          echo "INFO: User's main backup.env symlink at $USER_MAIN_ENV_SYMLINK already correctly points to $USER_ENV_DEST. Skipping."
      fi
  elif [[ ! -e "$USER_MAIN_ENV_SYMLINK" ]]; then # Only warn if main symlink also doesn't exist
      echo "WARN: Default environment file $USER_ENV_DEST does not exist. Cannot create $USER_MAIN_ENV_SYMLINK to it." >&2
      echo "      Please create an environment profile in '$EFFECTIVE_USER_CFG_ROOT/env/' and then use use_env.sh." >&2
  fi

  # --- Setup Convenience Symlink in Repository (Theme 5) ---
  REPO_CONVENIENCE_SYMLINK_PATH="$REPO_CONFIG_DIR_FOR_SYMLINK/backup.env" # e.g. ./config/backup.env
  # Ensure the target for the repo convenience symlink (the user's main symlink) exists and is valid
  if [[ -L "$USER_MAIN_ENV_SYMLINK" && -e "$(readlink "$USER_MAIN_ENV_SYMLINK")" ]]; then
      user_main_symlink_target_realpath="$(realpath "$USER_MAIN_ENV_SYMLINK")"
      repo_config_dir_realpath="$(realpath "$REPO_CONFIG_DIR_FOR_SYMLINK")"

      # Avoid creating a symlink inside repo's config dir that points to a backup.env
      # within that very same repo config dir (e.g. if user set --user-config-dir to repo's config)
      # The target of USER_MAIN_ENV_SYMLINK ($USER_ENV_DEST) is inside EFFECTIVE_USER_CFG_ROOT.
      # We want to avoid REPO_CONVENIENCE_SYMLINK_PATH -> $EFFECTIVE_USER_CFG_ROOT/backup.env
      # if $EFFECTIVE_USER_CFG_ROOT is $REPO_CONFIG_DIR_FOR_SYMLINK
      if [[ "$(dirname "$user_main_symlink_target_realpath")" != "$repo_config_dir_realpath" ]]; then
          echo "INFO: Updating repository convenience symlink: $REPO_CONVENIENCE_SYMLINK_PATH -> $USER_MAIN_ENV_SYMLINK"
          ln -sf "$USER_MAIN_ENV_SYMLINK" "$REPO_CONVENIENCE_SYMLINK_PATH"
      else
          echo "INFO: User config root is the repository config directory. Skipping repo convenience symlink to avoid self-reference."
      fi
  else
      echo "WARN: User's main backup.env symlink ($USER_MAIN_ENV_SYMLINK) does not exist or is broken." >&2
      echo "      Cannot create repository convenience symlink ($REPO_CONVENIENCE_SYMLINK_PATH)." >&2
  fi

  # Final summary messages for non-test mode
  echo "User setup complete. Summary:"
  echo "  User configuration root: $EFFECTIVE_USER_CFG_ROOT"
  echo "  Primary environment file created: $USER_ENV_DEST"
  echo "  Active environment symlink: $USER_MAIN_ENV_SYMLINK -> $(readlink -f "$USER_MAIN_ENV_SYMLINK" 2>/dev/null || echo "broken/missing")"
  echo "  Repository convenience symlink: $REPO_CONVENIENCE_SYMLINK_PATH -> $(readlink -f "$REPO_CONVENIENCE_SYMLINK_PATH" 2>/dev/null || echo "broken/missing")"
  echo "To enable your machine: $SCRIPT_DIR/bin/machine_state.sh --config \"$EFFECTIVE_USER_CFG_ROOT\" enable $IDENT"
  echo "To enable hooks, symlink from $USER_HOOKS_AVAIL_DIR to $USER_HOOKS_ENABLED_DIR"
  echo "To change active environment profile: $SCRIPT_DIR/bin/use_env.sh --config-dir \"$EFFECTIVE_USER_CFG_ROOT\" <profile_name.env>"


# --- Optional Test Run ---
elif [[ "$RUN_TEST_FLAG" == true ]]; then
  echo "INFO: Running $PROJECT_NAME Test Suite using isolated config: $EFFECTIVE_USER_CFG_ROOT"

  TEST_MACHINE_IDENT="test@localhost"
  TEST_MODE_MAIN_ENV_FILE="$EFFECTIVE_USER_CFG_ROOT/backup.env"
  TEST_MACHINE_EXCLUDES_FILE="$EFFECTIVE_USER_CFG_ROOT/excludes/${TEST_MACHINE_IDENT}.exclude"
  TEST_MACHINE_CONFIG_FILE="$EFFECTIVE_USER_CFG_ROOT/machines-available/${TEST_MACHINE_IDENT}"
  
  TEST_SOURCE_DATA_DIR_IN_REPO="$SCRIPT_DIR/test/source"

  echo "INFO: Test mode: Creating necessary subdirectories in $EFFECTIVE_USER_CFG_ROOT"
  mkdir -p "$EFFECTIVE_USER_CFG_ROOT/env" \
    "$EFFECTIVE_USER_CFG_ROOT/excludes" \
    "$EFFECTIVE_USER_CFG_ROOT/machines-available" \
    "$USER_HOOKS_AVAIL_DIR" \
    "$USER_HOOKS_ENABLED_DIR" # USER_HOOKS_AVAIL_DIR/ENABLED_DIR already point to correct test subdirs

  echo "INFO: Test mode: Creating test environment file: $TEST_MODE_MAIN_ENV_FILE"
  cat >"$TEST_MODE_MAIN_ENV_FILE" <<EOF
# Test Environment for $PROJECT_NAME (auto-generated by setup --test)
CONFIG_DIR="$EFFECTIVE_USER_CFG_ROOT"
LOCAL_TARGET_BASE="$TEST_BACKUP_TARGET_DIR"
REMOTE_TARGET_BASE=""
LOCAL_ARCHIVE_BASE="$TEST_BACKUP_ARCHIVE_DIR"
REMOTE_ARCHIVE_BASE=""
DRY_RUN="false"
EOF

  echo "INFO: Test mode: Creating test exclude file: $TEST_MACHINE_EXCLUDES_FILE"
  cat >"$TEST_MACHINE_EXCLUDES_FILE" <<EOF
# Test excludes for $TEST_MACHINE_IDENT (auto-generated by setup --test)
*Z.epub
dirB/myfile1.opus 
EOF

  echo "INFO: Test mode: Creating test machine config: $TEST_MACHINE_CONFIG_FILE"
  cat >"$TEST_MACHINE_CONFIG_FILE" <<EOF
# Test machine configuration for $PROJECT_NAME ($TEST_MACHINE_IDENT)
[$TEST_MACHINE_IDENT]
src=$TEST_SOURCE_DATA_DIR_IN_REPO/dirA
src=$TEST_SOURCE_DATA_DIR_IN_REPO/dirB
exclude-from=$TEST_MACHINE_EXCLUDES_FILE
EOF

  echo "INFO: Test mode: Enabling test machine '$TEST_MACHINE_IDENT' using isolated config..."
  "$SCRIPT_DIR/bin/machine_state.sh" --config "$EFFECTIVE_USER_CFG_ROOT" enable "$TEST_MACHINE_IDENT"

  echo "INFO: Test mode: Setting up hooks in isolated config directory: $USER_HOOKS_AVAIL_DIR"
  if [[ -d "$REPO_HOOKS_DIR" ]]; then
    # Copy hooks and make them executable
    for repo_hook_file in "$REPO_HOOKS_DIR"/*; do
      if [[ -f "$repo_hook_file" ]]; then
        hook_basename=$(basename "$repo_hook_file")
        user_hook_dest_path="$USER_HOOKS_AVAIL_DIR/$hook_basename" # USER_HOOKS_AVAIL_DIR is already the test one
        cp "$repo_hook_file" "$user_hook_dest_path"
        chmod u+x "$user_hook_dest_path"
      fi
    done
    echo "INFO: Test mode: Copied and made executable default hooks to $USER_HOOKS_AVAIL_DIR"
  else
    echo "WARN: Test mode: Repository hooks source directory not found: $REPO_HOOKS_DIR" >&2
  fi

  TEST_HOOK_TO_ENABLE="90_archive.sh"
  if [[ -f "$USER_HOOKS_AVAIL_DIR/$TEST_HOOK_TO_ENABLE" ]]; then
    ln -sf "../hooks-available/$TEST_HOOK_TO_ENABLE" "$USER_HOOKS_ENABLED_DIR/$TEST_HOOK_TO_ENABLE"
    echo "INFO: Test mode: Enabled test hook: $TEST_HOOK_TO_ENABLE"
  else
    echo "WARN: Test mode: Test hook $TEST_HOOK_TO_ENABLE not found in $USER_HOOKS_AVAIL_DIR. Skipping link." >&2
  fi

  echo "INFO: Test mode: Executing run_backup.sh with isolated config: $EFFECTIVE_USER_CFG_ROOT"
  "$SCRIPT_DIR/bin/run_backup.sh" --config "$EFFECTIVE_USER_CFG_ROOT"

  # --- Test Cleanup (Theme 5) ---
  local test_hook_enabled_link="$USER_HOOKS_ENABLED_DIR/$TEST_HOOK_TO_ENABLE"
  if [[ -L "$test_hook_enabled_link" ]]; then
    rm "$test_hook_enabled_link"
    echo "INFO: Test mode: Unlinked test hook: $test_hook_enabled_link"
  fi
  
  local test_machine_enabled_link="$EFFECTIVE_USER_CFG_ROOT/machines-enabled/$TEST_MACHINE_IDENT"
  if [[ -L "$test_machine_enabled_link" ]]; then
      rm "$test_machine_enabled_link"
      echo "INFO: Test mode: Unlinked and disabled test machine config for $TEST_MACHINE_IDENT."
  fi

  echo ""
  echo "$PROJECT_NAME Test Suite complete."
  echo "Output backup files should be in: $TEST_BACKUP_TARGET_DIR"
  echo "Archives (if any) should be in: $TEST_BACKUP_ARCHIVE_DIR"
  echo "Configuration used for this test run was isolated in: $EFFECTIVE_USER_CFG_ROOT"
  echo "This test did NOT affect your main user configuration in $USER_CONFIG_DEFAULT (unless --user-config-dir pointed there for non-test mode)"
fi
