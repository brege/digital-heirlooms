#!/usr/bin/env bash
# setup

set -euo pipefail

# Resolve script/repo directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR_DEFAULT="$HOME/.config/backup-kit"
CONFIG_DIR="${CONFIG_DIR:-$CONFIG_DIR_DEFAULT}"

# Determine system identity
USER_NAME="$(whoami)"
HOST_NAME="$(hostname -s)"
IDENT="${USER_NAME}@${HOST_NAME}"

# Template patterns
PLACEHOLDER="__user__@__hostname__"
PLACEHOLDER_ESCAPED="__user__@__hostname__"

# Paths
ENV_SRC_TEMPLATE="$SCRIPT_DIR/config/env/${PLACEHOLDER}_.env.template"
ENV_DEST="$CONFIG_DIR/env/${IDENT}_.env"

EXCLUDES_SRC_TEMPLATE="$SCRIPT_DIR/config/excludes/${PLACEHOLDER}"
EXCLUDES_DEST="$CONFIG_DIR/excludes/${IDENT}"

MACHINE_SRC_TEMPLATE="$SCRIPT_DIR/config/machines-available/${PLACEHOLDER}"
MACHINE_DEST="$CONFIG_DIR/machines-available/${IDENT}"

DEFAULT_EXCLUDE_SRC="$SCRIPT_DIR/config/excludes/default.exclude"
DEFAULT_EXCLUDE_DEST="$CONFIG_DIR/excludes/default.exclude"

SYMLINK_TARGET="$ENV_DEST"
SYMLINK_NAME="$SCRIPT_DIR/config/backup.env"

HOOKS_SRC_DIR="$SCRIPT_DIR/config/hooks"
HOOKS_AVAILABLE_DIR="$CONFIG_DIR/hooks-available"
HOOKS_ENABLED_DIR="$CONFIG_DIR/hooks-enabled"

# Handle --force flag
FORCE=false
if [[ "${1:-}" == "--force" ]]; then
    FORCE=true
    echo "‚ö†Ô∏è  Force mode enabled: existing files will be overwritten"
fi

echo "üì¶ Setting up backup-kit config for: $IDENT"
echo "üìÅ Config directory: $CONFIG_DIR"

# Create needed subdirectories
mkdir -p "$CONFIG_DIR/env" "$CONFIG_DIR/excludes" "$CONFIG_DIR/machines-available" "$HOOKS_AVAILABLE_DIR" "$HOOKS_ENABLED_DIR"

# Copy and template the .env file
if [[ "$FORCE" = true || ! -f "$ENV_DEST" ]]; then
    sed "s/$PLACEHOLDER_ESCAPED/$IDENT/g" "$ENV_SRC_TEMPLATE" > "$ENV_DEST"
    echo "‚úÖ Wrote: $ENV_DEST"
else
    echo "‚ö†Ô∏è  Skipped: $ENV_DEST already exists (use --force to overwrite)"
fi

# Copy and template the excludes file
if [[ "$FORCE" = true || ! -f "$EXCLUDES_DEST" ]]; then
    sed "s/$PLACEHOLDER_ESCAPED/$IDENT/g" "$EXCLUDES_SRC_TEMPLATE" > "$EXCLUDES_DEST"
    echo "‚úÖ Wrote: $EXCLUDES_DEST"
else
    echo "‚ö†Ô∏è  Skipped: $EXCLUDES_DEST already exists (use --force to overwrite)"
fi

# Copy and template the machine config
if [[ "$FORCE" = true || ! -f "$MACHINE_DEST" ]]; then
    sed \
      -e "s/$PLACEHOLDER_ESCAPED/$IDENT/g" \
      -e "s|__script_dir__|$SCRIPT_DIR|g" \
      "$MACHINE_SRC_TEMPLATE" > "$MACHINE_DEST"
    # Now update the src path in the machine config
    sed -i "s|src=\$CONFIG_DIR/test/source|src=\$SCRIPT_DIR/test/source|g" "$MACHINE_DEST"
    echo "‚úÖ Wrote: $MACHINE_DEST"
else
    echo "‚ö†Ô∏è  Skipped: $MACHINE_DEST already exists (use --force to overwrite)"
fi

# Always copy default.exclude unless it exists and force is not set
if [[ "$FORCE" = true || ! -f "$DEFAULT_EXCLUDE_DEST" ]]; then
    cp "$DEFAULT_EXCLUDE_SRC" "$DEFAULT_EXCLUDE_DEST"
    echo "‚úÖ Copied: $DEFAULT_EXCLUDE_DEST"
else
    echo "‚ö†Ô∏è  Skipped: $DEFAULT_EXCLUDE_DEST already exists (use --force to overwrite)"
fi

# Copy hooks to hooks-available if missing or --force is set
if [[ "$FORCE" = true || ! -d "$HOOKS_AVAILABLE_DIR" || -z "$(ls -A "$HOOKS_AVAILABLE_DIR")" ]]; then
  cp -a "$HOOKS_SRC_DIR/." "$HOOKS_AVAILABLE_DIR"
  echo "‚úÖ Copied hooks to: $HOOKS_AVAILABLE_DIR"
else
  echo "‚ö†Ô∏è  Skipped: hooks-available already exists and is not empty (use --force to overwrite)"
fi

# Create or update symlink for backup.env
ln -sf "$SYMLINK_TARGET" "$SYMLINK_NAME"
echo "üîó Linked: $SYMLINK_NAME ‚Üí $SYMLINK_TARGET"

# ============================
# üß™ Optional unit test (if --test is passed)
# ============================

if [[ "${1:-}" == "--test" ]]; then
  echo ""
  echo "üß™ Running unit test to verify setup..."
  echo "‚Üí This will back up dummy test files from test/source/ to test/target/"
  echo "‚Üí Dry run mode is enabled by default, so no real sync will occur unless changed in backup.env"
  echo ""

  echo "üîó Enabling test machine config..."
  "$SCRIPT_DIR/bin/machine_state.sh" enable "$IDENT"

  ENV_FILE="$CONFIG_DIR/env/${IDENT}_.env"
  MACHINE_FILE="$CONFIG_DIR/machines-available/${IDENT}"

  sed -i "s|LOCAL_DEST_DIR=.*|LOCAL_DEST_DIR=\"$SCRIPT_DIR/test/target\"|" "$ENV_FILE"
  sed -i "s|LOCAL_DEST_DIR=.*|LOCAL_DEST_DIR=\"$SCRIPT_DIR/test/target\"|" "$MACHINE_FILE"

  # Link test hook only if not already linked
  TEST_HOOK="90_archive.sh"
  if [[ ! -e "$HOOKS_ENABLED_DIR/$TEST_HOOK" ]]; then
    ln -s "$HOOKS_AVAILABLE_DIR/$TEST_HOOK" "$HOOKS_ENABLED_DIR/$TEST_HOOK"
    HOOK_WAS_LINKED=true
    echo "üîó Temporarily enabled test hook: $TEST_HOOK"
  else
    HOOK_WAS_LINKED=false
    echo "‚ö†Ô∏è  Skipped: hook $TEST_HOOK already linked"
  fi

  echo "üöÄ Executing run_backup.sh..."
  "$SCRIPT_DIR/bin/run_backup.sh"

  if [[ "$HOOK_WAS_LINKED" == true ]]; then
    rm "$HOOKS_ENABLED_DIR/$TEST_HOOK"
    echo "üßπ Unlinked test hook: $TEST_HOOK"
  fi

  echo ""
  echo "‚úÖ Unit test complete. Check 'test/target/' for backup results."
  echo "üí° You can now edit your config in ~/.config/backup-kit/ and re-run ./bin/run_backup.sh"
fi
